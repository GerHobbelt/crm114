#! @CRM@
window
{
	isolate (:lsout:)
	output /\n ----- executing an ls -----\n/
	syscall ( ) (:lsout:) /ls *.c/ /[Windows-MS]dir *.c /
	output /:*:lsout:/
	output /\n ----- executing s1 script -----\n/
	syscall ( ) (:lsout:) /exectest_s1.sh/
	output /:*:lsout:/
	output /\n ----- executing s1 script from current dir -----\n/
	syscall ( ) (:lsout:) /.\/exectest_s1.sh/
	output /:*:lsout:/
	isolate (:calcout:)
	output /\n ----- calculating 1 + 2 + 3 using bc -----\n/
	syscall ( 1 + 2 + 3 \n) (:calcout:) /bc/
	output /:*:calcout:/
	isolate (:lslaout:)
	output /\n ----- executing another ls -----\n/
	syscall ( ) (:lsout:) /ls *.c/ /[Windows-MS]dir \/b *.c /
	output /:*:lsout:/
	output /\n ----- executing an ls -la -----\n/
	syscall ( ) (:lslaout:) /ls -la *.c/ /[Windows-MS]dir \/s *.c /
	output /:*:lslaout:/
	isolate (:catout:)
	output /\n ----- outputting to a file using cat -----\n/
	syscall ( This is a cat out \n) (:catout:) /cat > e1.out/
	output /:*:catout:/
	isolate (:c1:)
        input [e1.out] (:c1:)
	output /file contents:\n:*:c1:/
	isolate ( :proc:)
	output /\n ----- keeping a process around ----  \n/
	output /\n preparing... :*:proc:/
	syscall <keep> ( .  a one \n . ) ( ) (:proc:) /cat > e2.out/
	output /\n did one... :*:proc:/
	syscall <keep> ( and a two \n . ) () (:proc:) //
	output /\n did it again...:*:proc:/
	syscall ( and a three \n) () (:proc:) //
	output /\n and done ...:*:proc: \n/
        input [e2.out] (:c1:)
	output /file contents:\n:*:c1:/
	output /\n ----- testing keep reads from proc -----\n/
	isolate (:lslaout:) / /
#	syscall < keep > ( ) (:lslaout:) (:proc:) /ls -la \/dev /
	syscall < keep > ( ) (:lslaout:) (:proc:) /ls -la *.c/ /[Windows-MS]dir \/s *.c /
	output /--- got immediate : \n:*:lslaout: \n ---end-----/
    :async_test_sleeploop:
	syscall <keep > () (:lslaout:) (:proc:) //	
	output /--- got this later : \n-:*:lslaout:-\n/
	{
		#       try it first sleeping only .1 second 
		{
			syscall /sleep .1/
			output /--- .1 sleep\n/
			syscall <keep> () (:lslaout:) (:proc:) 
			output /--- .1 sleep: got : \n-:*:lslaout:-\n/
			match [:lslaout:] /....../
			goto /:async_test_sleeploop:/
		}
		#       try again, sleeping 1 second
		{
			syscall <> /sleep 1/
			output /--- 1 sleep\n/
			syscall <keep > () (:lslaout:) (:proc:)
			output /--- 1.0 sleep: got : \n-:*:lslaout:-\n/
			match [:lslaout:] /......./
			goto /:async_test_sleeploop:/
		}
		#       try once again, sleeping 3 second
		{
			syscall <> /sleep 3/
			output /--- 3 sleep\n/
			syscall <keep > () (:lslaout:) (:proc:) 
			output /--- 3.0 sleep: got : \n-:*:lslaout:-\n/
			match [:lslaout:] /......./
			goto /:async_test_sleeploop:/
		}
	}
	syscall <> () (:lslaout:) (:proc:) //
	output /proc = :*:proc:\n/
	output /--- and finally synch\/eof : \n:*:lslaout: \n ---end-----/

	syscall < keep > ( ) (:lslaout:) (:proc:) /.\/exectest_s1.sh /
	output /proc = :*:proc:\n/
	output /--- s1 script: got immediate : \n:*:lslaout: \n ---end-----/
    :async_test_sleeploop2:
	syscall <keep > () (:lslaout:) (:proc:) //	
	output /proc = :*:proc:\n/
	output /--- got this later : \n-:*:lslaout:-\n/
	{
		#       try it first sleeping only .1 second 
		{
			syscall /sleep .1/
			output /--- .1 sleep\n/
			syscall <keep> () (:lslaout:) (:proc:) 
			output /proc = :*:proc:\n/
			output /--- .1 sleep: got : \n-:*:lslaout:-\n/
			match [:lslaout:] /....../
			goto /:async_test_sleeploop2:/
		}
		#       try again, sleeping 1 second
		{
			syscall <> /sleep 1/
			output /--- 1 sleep\n/
			syscall <keep > () (:lslaout:) (:proc:) 
			output /proc = :*:proc:\n/
			output /--- 1.0 sleep: got : \n-:*:lslaout:-\n/
			match [:lslaout:] /......./
			goto /:async_test_sleeploop2:/
		}
		#       try once again, sleeping 3 second
		{
			syscall <> /sleep 3/
			output /--- 3 sleep\n/
			syscall <keep > () (:lslaout:) (:proc:) 
			output /proc = :*:proc:\n/
			output /--- 3.0 sleep: got : \n-:*:lslaout:-\n/
			match [:lslaout:] /......./
			goto /:async_test_sleeploop2:/
		}
	}
	syscall <> () (:lslaout:) (:proc:) //
	output /--- and finally synch\/eof : \n:*:lslaout: \n ---end-----/

	output /Testing fire-and-forget asynch \n/
	output /proc = :*:proc:\n/
#	syscall < async > () (:lslaout:) (:proc:) /ls -la \/dev /
	syscall < async > () (:lslaout:) (:proc:) /ls -la *.c / /[Windows-MS]dir \/s *.c /
	output /fire and forget ls got: :*:lslaout: \n/
	output /proc = :*:proc:\n/
	syscall < async > ( ) (:lslaout:) (:proc:) /.\/exectest_s1.sh /
	output /fire and forget s1 script for current dir got: :*:lslaout: \n/
	output /proc = :*:proc:\n/
	syscall < async > ( ) (:lslaout:) (:proc:) /exectest_s1.sh /
	output /fire and forget s1 script got: :*:lslaout: \n/
	output /proc = :*:proc:\n/
	# wait a while, as the <async> sucker thread(s) may otherwise be prematurily aborted, leading to
	# memory leaks being reported. This, of course, applies to the Win32 platform...
	syscall <> /sleep 3/
}


