Maintainer Notes
================

Prerequisites
-------------

You'll need these packages installed at least:

        automake
        autoconf

For processing any Win32 ported files you'll also need this on your UNIX
box:

        dos2unix
        expand                  (man expand(1): convert TABS to spaces)

For processing the documentation, you'll need this too:

        docbook (? TODO )
        tidy                    - a.k.a. htmltidy



Rebuild from scratch / After editing the .am/.in files
------------------------------------------------------

To regenerate the configure script, proper Makefile.in, et al, execute the
sequence:

        ./cvsbuild

        or

        ./cvsbuild --hammer

To generate the man and html documentation follow up with these:

        make man-html  (TODO)
        make htmltidy

and to produce a new distro archive choose one of these (or

        grep -e 'dist-' Makefile

to see the available distro packaging methods):

        make dist
        make dist-bzip2
        make dist-all



Clean up source files after editing [on a Win32 or other non-UNIX box]
----------------------------------------------------------------------

run the

        ./fix_crlf.sh

shell script to clean up the code: it does more that just clean up those
CRLF line terminations (using dos2unix) but also expands any TAB characters
found in any text/source files and trims trailing whitespace to boot.

If you *really* feel like a spring sale is coming up, you might also want to
run

        make reindent

and

        make htmltidy

for some finegrained distro dust busting.


CAVEATS: you may wish to run ./fix_crlf.sh at the end again, just to make
absolutely sure. More important though is running this:

        make clean

or:

        make distclean

or even better:

        ./cvsbuild.sh --clean

as any previous compiler output (binaries, object files, that sort of thing)
residing in this directory tree will surely have been destroyed by
./fix_crlf.sh !




Notes / Misc
------------

Note to self: handy commands for Sourceforge CVS access (these commands
assume that the local directory tree exactly mirrors the remote repository
as obtained through 'cvs checkout'):

- view diff between local file and remote repository's version:

  cvs -d:ext:i_a@pavuk.cvs.sourceforge.net:/cvsroot/pavuk -z3 diff -bBcw README.win32

- add a new directory (e.g. 'doc/') to the remote repository:

  cd ./pavuk/   <-- parent of directory to create
  cvs -d:ext:i_a@pavuk.cvs.sourceforge.net:/cvsroot/pavuk -z3 add -m "new files that come with the Win32 port of pavuk/chunky"  doc

- add a new file to the remote repository:

  cvs -d:ext:i_a@pavuk.cvs.sourceforge.net:/cvsroot/pavuk -z3 add -m "new files that come with the Win32 port of pavuk/chunky"  doc/Makefile.am

- Big Bang: checkin all changed files in the current directory (NO
  recursion!):

   cvs -d:ext:i_a@pavuk.cvs.sourceforge.net:/cvsroot/pavuk -z3 ci -F ../../cvs-entry.txt ` find -maxdepth 1 -type f `



Building the docbook format documentation
-----------------------------------------

The docbook documentation is intended to replace the manpage (which will be
generated from the docbook documentation).

Currently, this mechanism is still very fragile.

You need to have 'docbook2X' installed. I assume here it is installed in
/usr/local/ , i.e. you downloaded docbook2X, unpacked it and ran the regular

  ./configure
  make
  make install

incantation.

However, a note of warning here: v0.8.8 works, BUT requires a few tweaks to
make it work. You CANNOT use the regular docbook2man command -- at least I
couldn't -- but have to resort to calling both parts of the conversion
process separately, like the docbook2X documentation suggests in such cases.

HOWEVER, this will NOT work either, unless you FIX the installed files. Yes,
you will get an error about the "http://www.oasis-
open.org/docbook/xml/4.2/docbookx.dtd" URL, where both documentation and
google suggest to 'register' this XSL in 'the catalog'. But which one?!

Answer: you need to update the catalog.xml that was installed with
docbook2X, so, assuming you installed it in the default /usr/local/
location, that would mean you'd have to run a command like:

  xmlcatalog -v --add system "http://docbook2x.sf.net/latest/xslt/man/docbook.xsl" /usr/local/share/docbook2X/xslt/man/docbook.xsl   /usr/local/share/docbook2X/xslt/catalog.xml

NOTE: I left out the --no_out option here so you can see what will change,
before finalizing this step. Just run the same command, but now with '--
no_out' added, to update that catalog.xml file. See also the xmlcatalog(1)
man page.

Now it MAY STILL NOT WORK. This happened to me. Turns out the three tools
db2x_xsltproc / db2x_texixml / db2x_manxml all contain a '${prefix}' string
in their code (at three lines in each) which should have been replaced with
/usr/local during the make / make install process (?). Load each of these,
found in /usr/local/bin/ , into vi and run something like

  :1,100s/\${prefix}/\/usr\/local/

on them and save each to fix this.

Now did it work? Nope, IT DID NOT WORK for me. I had to FORCE the stylesheet
to be used because I consistently got this error:

  warning: failed to load external entity ""
  cannot parse

so in the end it got down to these two commands to produce a viable manpage
from the docbook source:

  cd doc
  db2x_xsltproc -C /usr/local/share/docbook2X/xslt/catalog.xml -s man  pavuk.docbook.xml -d -o pavuk.docbook.mxml
  # ^^^ if this does not work, use this instead to force your hand:
  db2x_xsltproc -s /usr/local/share/docbook2X/xslt/man/docbook.xsl     pavuk.docbook.xml -d -o pavuk.docbook.mxml
  #
  # now we have the docbook2X intermediate format, so continue with the next step:
  db2x_manxml  pavuk.docbook.mxml

This sequence will have produced a 'pavuk.1' manpage in the ./doc/ directory
if all went well.


If you have docbook2X installed (and fixed as described above), you can
create a new pavuk manpage in the ./doc/ directory by executing these
commands:

  cd doc
  make pavuk.1

view the output:

  man -l pavuk.1


You may also generate TexInfo documentation (for creating a GNU info on-line
manual) by running

  cd doc
  make pavuk.texi

Note: these are experimental.



[TODO: add docbook2X detection to configure.in and Makefiles; test and complete html and man page output.]

[TODO: add version @VERSION@, etc. patches in the docbook source like it was done in ./man/pavuk.1.in before]







