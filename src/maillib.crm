# maillib.crm - handy library for mail whacking - wsy 2006
#
# Copyright (C) 2002-2008 William S. Yerazunis; licensed under the
# GNU Public License (GPL) version 2.  A copy of this license is included
# in the distribution media, or obtain one from www.fsf.org .
#


##########################################################
#
#        :load_cf_file:
#
#    Calling Sequence:
#        call /:load_cf_file:/ [filename]
#    Returns:
#        nothing.  This routine ONLY sets up variables from the .cf file
#
###########################################################
#
# Load in the specified .cf file.  The .cf file needs
# to be in the format
#   :varname: /value/
#
# Blank lines and lines starting with a # are ignored
#
# Note that because this happens during the run, stuff set in
# a .cf file will _override_ any comand line arguments that get set.
# This could (and should) probably be changed.
#
:load_cf_file: (:cf_filename:)
{
    isolate (:option_txt:) //
    # isolate (:ev:)                   -- unused
    isolate (:verbose_startup:)
    #
    #    Part 1  - read in the options/configuration file
    #
    {
        {
            match <absent> [:cf_filename:] /.+/
            return
        }
        input [:*:cf_filename:] (:option_txt:)
    }
    #
    #
    #   reset loop for matching to start of :option_txt:
    #
    match [:option_txt:] //

    #   and loop till there are no more options.
    {
        #   find a line that looks like a parameter setting...
        match <fromend nomultiline> (:line: :name: :value:) \
                [:option_txt:] /^[ ]*(:[[:graph:]]+:)[ \t]+\/(.*)\//
        {
            #     Verbose startup?
            match [:verbose_startup:] /SET/
            output / config file line:         :*:line:\n/
        }
        {
            #    don't execute the assign if there's
            #    a # at the start of the line.
            match <absent> [:name:] /^\x23/
            {
                #     Verbose startup?
                match [:verbose_startup:] /SET/
                output /  :*:name: := ':*:value:'\n/
            }

            # isolate (:*:name:) /:*:value:/
            # output /-->  :*:name: := ':+:name:'\n/

            # [i_a] the code below allows the use of :*:xyz: expressions inside
            # the mailfilter.cf option values, e.g.:
            #
            #:trainer_invoke_command: /crm114 :*:fileprefix:mailtrainer.crm/

            {
                {
                    # HACK to survive bloody eval bug in vanilla CRM114:
                    isolate (:*:name:) /:*:value:/
                    match [:*:name:] <absent> /./
                    isolate (:*:name:) //
                }
                alius
                {
                    isolate (:*:name:) //
                    eval (:*:name:) /:*:value:/
                }
            }

            {
                #     Verbose startup?
                match [:verbose_startup:] /SET/
                output /-->  :*:name: := ':+:name:'\n/
            }
        }
        liaf
    }
    {
        #     Verbose startup?
        match [:verbose_startup:] /SET/
        output /=== processing config file done! ===\n/
    }
}
# All done, return.
return



###########################################################
#
#        :mail_preprocess:
#
#     Calling Sequence:
#        call /:mail_preprocess:/ [variable containing text to be preprocessed]
#
#     Returns:
#        the processed text
#
###########################################################
#   Preprocess a piece of mail to whatever we've specified in the
#   loaded .cf file setup.

:mail_preprocess:  (:mutilation_input:)

#
#      We take the input and create a mutilated, annotated copy
#      of the incoming text.  The mutilations are defined by
#      whatever the .cf file has set up.
#      will become an annotated _copy_  of the incoming text,
#      with whatever changes we think will help us classify better.
#
#      We clip m_text to be the first :decision_length: characters of
#      the incoming text
#
match (:m_text:) [:*:mutilation_input: 0 :*:decision_length:] /.*/
isolate (:m_text:)
isolate (:commentbin:) //
#
#
#       do we do any expansions?
{

    #   expansion 1: - do we perform base64 expansions?
    {
        match [:do_base64:] /yes/
        {
            #  yes, expand base64's if there are any
            #
            #    Note: some spams don't even bother to use
            #    a 'Content-Transfer-Encoding' marker,
            #    and even fewer use Content-Type: text/whatever
            #    so we have to sort of wing it, when to expand
            #    what _might_ be base64 and when to ignore it.
            #    For now, if it says it's a base64, it gets
            #    expanded, no matter what the type.  Maybe
            #    someday someone will put in a lockout for
            #    things like .jpg files, .doc files, etc.
            #
            match [:m_text:] <nocase> (:a: :h: :b:) \
                    /(Content-Transfer-Encoding): base64(.*)/
            match (:c:) [:b:]  \
                    /([a-zA-Z0-9+=!\/]+:*:_nl:){2,200}/
            isolate (:exp_text:) //
            syscall (:*:c:) (:exp_text:) /:*:mime_decoder: /

            #   and stuff the result back into m_text for
            #   classification right in context.
            alter (:c:) /:*:exp_text:/
            #   and mark this piece of mime as "prior".
            alter (:h:) /Content-Transfer-Prior-Encoding/
            #   repeat till no more Mime base64 encodings
            liaf
        }
    }


    #   Expansion 2 - fetch and insert URLs into the stream for further
    #   analysis.  BUG NOTE: as originally written, this was fully recursive
    #   without limit, and might concieveably spider the entire web.  The
    #   EVAL statement limits total fetched length to not more than
    #   one fetch more than :decision_length:

    {
        match [:expand_urls:] /yes/
        {
            match [:m_text:] (:url:) /http:\/\/[[:graph:]]+/
            isolate (:wget_output:) //
            syscall /:*:url_fetch_cmd: :*:url: | :*:url_trim_cmd: / \
                    () (:wget_output:)
            alter (:url:) /:*:url:\n  :*:wget_output:  \n/
            eval /:@: :#:m_text: < (:*:decision_length: \/ 4) :/
            liaf
        }
    }

    #   expansion 3 :  do we bust HTML comments ( a.k.a.
    #    hypertextus interruptus) out?
    {
        match [:undo_interruptus:] /yes/
        {
            match [:m_text:] (:comment:) /<!--([^-]|-[^-]|--[^>])*-->/
            alter (:commentbin:) /:*:commentbin: :*:comment:/
            alter ( :comment: ) //
            liaf
        }
        #     if we had at least 80 characters worth of comments, then
        #     it's worth using the decommented text, else not.
        #     (this my personal judgement call)
        {
            {
                match [:commentbin:] /(.){80,}/
            }
            alius
            {
                alter (:commentbin:) //
            }
        }
    }
}

#    and reassemble the mucked-over text into the :m_text: var, always
#    with the base64's expanded, then the extracted comments
#
{
    alter (:m_text:) \
            /:*:m_text: \n :*:commentbin: \n\n/
}

#########################################################
#
#   Do we want to do any rewrites before running?
#
{
    match [:rewrites_enabled:] /yes/
    #
    # NOTE  CHANGE THIS ONE TO ISOLATE AND THE PROGRAM FAILS!
    #
    isolate (:rewrites:) //
    isolate (:fileprefix:) <default> //
    input (:rewrites:) [:*:fileprefix:rewrites.mfp]

    #    reset matching on rewrites to start of string - if no string, no more
    #    processing of rewrites !!
    match [:rewrites:] //
    #
    #
    {
        #    Grab the next regex; turn the one-per-line patterns into a
        #    regex and a replacement string.
        #    First, do the line-spanning regexes.
        match <fromend nomultiline> (:ch: :fr1: :to:) [:rewrites:] /(.+)>-->(.*)/
        #    see if the "fr" regex matches anywhere
        match [:m_text:] //
        {
            match [:m_text:] <fromend> (:place:) /:*:fr1:/
            #  Yep, it matched... alter it and do it again
            #
            alter (:place:) /:*:to:/
            liaf
        }
        #   Nope, didn't match... grab the next regex and try again,
        liaf
    }
    #
    #     reset back to the start of the rewrites.
    #
    match [:rewrites:] //
    #
    #      and do it again for non-line-spanners
    {
        #    Go through and do it again, except this time do it for
        #    the non-line-spanning regexes.
        match <fromend nomultiline> (:ch: :fr2: :to:) [:rewrites:] /(.+)>->(.*)/
        #    see if the "fr" regex matches anywhere
        {
            match [:m_text:] <nomultiline> (:place:) /:*:fr2:/
            #  Yep, it matched... alter it and do it again
            #
            alter (:place:) /:*:to:/
            liaf
        }
        #   Nope, didn't match... grab the next regex and try again,
        liaf
    }
}
#  done with rewrites.


#  all done; m_text now has the fully mutilated text.
return /:*:m_text:/


###############################################################
#
#     This is Mungmail - these are the replacement routines for
#     formail(), to remove dependency on formail() being in every
#     distribution (because formail() isn't _in_ every distribution)
#
#
# Add a new header
:mungmail_add: (:new_header:)
{
    #     Grab the current headers
    call /:mungmail_grab_current_headers:/
    alter (:current_headers:) /:*:current_headers::*:new_header:\n/
}
return


#
#          extract a header (first of them found)
#
:mungmail_extract: (:header_name:)
{
    #      Extract the header with the given field type, and
    #      return that.  Note that we add the colon here; don't
    #      put it into the desired_header string.
    #
    call /:mungmail_grab_current_headers:/
    {
        match [:current_headers:] <nocase> (:: :desired_header:)  \
                /(?:^|\n)(:*:header_name: *: ([^\n]|\n[[:space:]])*)/
        return /:*:desired_header:/
    }
}
return


#
#          delete all current headers of this type
#
:mungmail_delete: (:new_header:)
{
    call /:mungmail_grab_current_headers:/
    {
        match (:new_header_type:) [:new_header:] /[[:graph:]]+/
    }
    #
    # a LIAF-loop to delete any header (including continuations) that
    # has a type that matches the new_header_type.
    #
    {
        match [:current_headers:] (:kill_this_line:) \
                /:*:new_header_type: ([^\n]|\n[[:space:]])*\n/
        alter (:kill_this_line:) //
        liaf
    }
}
return


#          delete all current headers of this type, insert ours instead.
#
:mungmail_unique: (:new_header:)
{
    call /:mungmail_grab_current_headers:/
    {
        match (:new_header_type:) [:new_header:] /[[:graph:]]+/
    }
    call /:mungmail_delete:/ [:*:new_header:]
    call /:mungmail_add:/ [:*:new_header:]
}
return


#
#  Helper routine to get the current mail headers of :_dw:
#
:mungmail_grab_current_headers:
{
    {
        #     Grab everything before the first \n\n
        match (:: :current_headers:) /(([^\n]+\n)+)\n/
        #        output /-A-->:*:current_headers:<---\n/
        return
    }
    # if we got here, it wasn't a real message (void body, and/or no
    # doubled newline) but it might still have useful text anyway.
    # Is there a final newline?
    {
        match (:current_headers:) /^.*\n$/
        #          output /-B-->:*:current_headers:<---\n/
        return
    }
    # if we got to here, then there wasn't even a final newline.
    # That's a violation of RFC, we'll add it.
    {
        alter (:_dw:) /:*:_dw:\n/
        match (:current_headers:) /.+/
        #           output /-C-->:*:current_headers:<---\n/
        return
    }
    fault / Couldn't manage to find the headers, though I tried really hard\n/
}
return


#
# find header arg1, append comment arg2-n.  If no
# such header, create it, and add the comment.  Note that
# neither the header name nor the comment can contain spaces.
#

:mungmail_add_comment: (:ac_args:)
{
    #    parse input args to this routine
    match [:ac_args:] (:: :header: :comment:) /([[:graph:]]+) ([[:graph:]]+)/
    {
        #    find the header if it exists
        match (:found: :hd: :tail:) <nomultiline nocase> /^(:*:header:) (.*)/
        alter (:tail:) /:*:tail: (:*:comment:)/
    }
    alius
    {
        #    no such header.  make one.
        call /:mungmail_add:/ [:*:header: (:*:comment:)]
    }
}
return


#
# change_subject_line
#
# get the Subject: line.  If none, make one.
:mungmail_mung_subject: (:new_tag:)
{
    {
        match (:subject_line: :subj_text:) <nocase nomultiline> \
                /^Subject: (.*)/
    }
    alius
    {
        match (:end_of_headers:) /\n\n/
        alter (:end_of_headers:) /\nSubject: ( none supplied in original message )\n\n/
        match (:subject_line: :subj_text:) <nomultiline> /^Subject: (.*)/
    }
}
{
    #
    # If we are re-sending this, we want to de-fang the
    # subject, otherwise we don't.
    match [:reject_address:]  /[a-zA-Z0-9]/
    # Paolo P. suggests this alteration to avoid subversion
    # by enclosing an alternate target in "marks".  We always
    # have to do this.
    {
        match (:dq:) [:subj_text:] /\$/
        alter (:dq:) /USD/
        liaf
    }
    #
    #   and translate away anything that might be a shell subterfuge
    translate (:subj_text:) [:subj_text:] /^-a-zA-Z0-9!., /
}
#
#     If the user asked for a spam-flagging string, put the flagging
#     string into the subject.
#
{
    match [:new_tag:] /./
    alter (:subj_text:) \
            /:*:new_tag: :*:subj_text:/
}
return


#
#        Mark a piece of mail with Reaver IDs.   Hopefully one or the
#        other of these will survive your local mailer.
#
:mungmail_add_cache_info: (:cid:)
{
    call /:mungmail_unique:/ [X-CRM114-CacheID: sfid-:*:cid:]
    # [i_a]
    # Now doesn't replacing the next one screw up mail reader
    # conversation trees by appending to the Message-Id to the
    # message? (mail readers might not like altered Mesage-Id's...)
    call /:mungmail_add_comment:/ [Message-Id: sfid-:*:cid:]
}
return


###############################################################
#
#       Reaver Cache routines
#
#           Assumptions= the var :text_cache: contains the name of
#           the cache directory
#
#      Assure that the text cache exists
:reavercache_init:
{
    match [:text_cache:] /./
    {
        ###       If the text_cache dir isn't there, create it
        #         and it's subdirectories.
        #
        isolate (:tmp:) //
        call /:verbosity:/ [reavercache_init: check if subtree exists already]
        {
            call /:verbosity:/ [reavercache_init: host type = ':*:_hosttype:']
            match [:_hosttype:] /Windows-MS/
            call /:mk_dospath:/ [:*:text_cache:] (:dospath:)
            syscall () (:tmp:) /dir \/s \/b :*:dospath: /
            call /:verbosity:/ [reavercache_init: subtree ls --> :*:tmp:]
            match [:tmp:] <absent> /texts/
            call /:verbosity:/ [reavercache_init: create subdirectories]
            syscall () () /mkdir :*:dospath: /
            syscall () () /mkdir :*:dospath:\\texts /
            syscall () () /mkdir :*:dospath:\\prob_good /
            syscall () () /mkdir :*:dospath:\\prob_spam /
            syscall () () /mkdir :*:dospath:\\known_good /
            syscall () () /mkdir :*:dospath:\\known_spam /
            syscall () () /mkdir :*:dospath:\\empty /
        }
        alius
        {
            syscall () (:tmp:) /ls :*:text_cache: 2>&1 /    # [i_a] why the redirect? both stdout and stderr are captured?
            call /:verbosity:/ [reavercache_init: subtree ls --> :*:tmp:]
            match [:tmp:] <absent> /texts/
            call /:verbosity:/ [reavercache_init: create subdirectories]
            syscall () () /mkdir :*:text_cache: /
            syscall () () /mkdir :*:text_cache:\/texts /
            syscall () () /mkdir :*:text_cache:\/prob_good /
            syscall () () /mkdir :*:text_cache:\/prob_spam /
            syscall () () /mkdir :*:text_cache:\/known_good /
            syscall () () /mkdir :*:text_cache:\/known_spam /
            syscall () () /mkdir :*:text_cache:\/empty /
        }
        call /:verbosity:/ [reavercache_init: subtree created]
    }
}
return


#
# Generate a suitable CacheID for the given message.
#
:mk_cacheid:  (:text:)
{
    isolate (:cacheid:) <default> //
    match [:cacheid:] <absent> /./   # Don't create a new CacheID when we already got one

    isolate (:system_time: :msg_hash:) //
    {
        match [:_hosttype:] /Windows-MS/
        call /:verbosity:/ [mk_cacheid: date determine for Win32]
        syscall () (:system_time:) /date \/T && time \/T / [timeout=2.0]  # Win32: GROT GROT GROT!
        call /:verbosity:/ [mk_cacheid: date determined @ ':*:system_time:']
        match [:system_time:] ( :: :cacheid: :cacheid2nd: ) /([[:graph:]]+)[^[:graph:]]*([[:graph:]]*)/
        call /:verbosity:/ [mk_cacheid: of which remains: ':*:cacheid:' + ':*:cacheid2nd:' ]
        call /:verbosity:/ [mk_cacheid: going to merge date and time into one line now for MS Windows]
        alter (:cacheid:) /:*:cacheid:_:*:cacheid2nd:/
        call /:verbosity:/ [mk_cacheid: before correction: ':*:cacheid:']
        translate (:cacheid:) [:cacheid:] /^0-9_-/ //
        call /:verbosity:/ [mk_cacheid: after correction: ':*:cacheid:']
    }
    alius
    {
        syscall () (:system_time:) /date +%Y%m%d_%H%M%S_%N /
        call /:verbosity:/ [mk_cacheid: date determined @ ':*:system_time:']
        match [:system_time:] ( :: :cacheid: ) /([[:graph:]]+)..../
        call /:verbosity:/ [mk_cacheid: UNIX time: ':*:cacheid:']
    }
    call /:verbosity:/ [mk_cacheid: cacheid: ':*:cacheid:']
    hash (:msg_hash:) /:*:text:/
    call /:verbosity:/ [mk_cacheid: hash determined @ ':*:msg_hash:']
    # It's unclear if the following increases security at all.
    isolate (:cacheid:) /:*:cacheid:_:*:msg_hash:/
    call /:verbosity:/ [mk_cacheid: CacheID has been determined: ':*:cacheid:']
}
return /:*:cacheid:/


#
#      Put some text into the cache;
#
#      Extra inputs:
#          - variable :text_cache: must be a non-empty directory
#          - variable :long_cacheid: is set to the file alone (no directory) name
#
:reavercache_store: (:text:)
{
    match [:text_cache:] /./   # Don't store it if no reavercache desired
    match [:long_cacheid:] /./

    call /:verbosity:/ [reavercache_store: going to store mail (flag: :*:text_cache:)]
    output [:*:long_cacheid:] /:*:text:/
    call /:verbosity:/ [reavercache_store: mail stored in file: ':*:long_cacheid:']
}
return


#
# print text to stderr for verbose display of events
#
:verbosity: (:verbose_text:)
{
    match [:verbose:] /SET/

    {
        # HACK for VANILLA CRM114:
        match [:_hosttype:] /UNKNOWN/
        output <append> [:*:verbose_logfile:] /VERBOSE: :*:verbose_text:\n/
    }
    alius

    isolate (:verbose_text:)  /\n:*:verbose_text:/ 
    # ^^^ extra NL is needed for <newend> to recognize any NL at the start of :verbose_text:
    isolate (:verbose_text_ln:) //

    # we'll automatically loose the optional terminating NEWLINE anyway, so no need to trim at end

    isolate (:verbose_logfile:) <default> //

    match [:verbose_text:] <fromstart nomultiline> //
    {
        # fetch one line and print; abort when it's an empty '.*' match at
        # the end of the content: <fromend newend>
        match [:verbose_text:] <fromend newend nomultiline> /.*/ (:verbose_text_ln:)
        output <append> [:*:verbose_logfile:] /VERBOSE: :*:verbose_text_ln:\n/

        liaf
    }
}
return


#############################################################
#       Get the pR of whatever (passed in)
#############################################################
#
:get_pr: (:text:)
{
    isolate (:classify_status:) //

    call /:verbosity:/ [Classify:\n\
Good css:    ':*:fileprefix::*:goodcss:'\n\
spam css:    ':*:fileprefix::*:spamcss:'\n\
lcr:         ':*:lcr:'\n\
clf:         ':*:clf:'\n\
text:        ':*:text:'\n]  # for content: :+:text:

    # next brace set because classify will branch based on pR!
    {
        classify <:*:clf:> [:*:text:] /:*:lcr:/ \
                 (:*:fileprefix::*:goodcss: | :*:fileprefix::*:spamcss: ) \
                 (:classify_status:)
    }

    call /:verbosity:/ [classify_status: ':*:classify_status:'\n]

    match [:classify_status:] <nomultiline> \
         /^#0.* pR: *([-+0-9.eE]+)/ (:: :pr:)
}
return /:*:pr:/


#
# convert path to DOS/Windows compatible version
#
:mk_dospath: (:inpath:)
{
    isolate (:dospath:) //
    # convert / path sep to \
    translate (:dospath:) [:inpath:] /\// /\\/
    # make sure all double occurrences (thanks to \/ escaped config lines) are stripped
    # down to single occurrences of \
    translate <unique> (:dospath:) [:dospath:] /\\/ /\\/
}
return /:*:dospath:/


#
#     And the mother of all traps...
#
#

trap (:broken_program_message:) /.*/
{
    #accept
    output [:*:mailout:] /:*:_dw:/

    output /:*:_nl: Aw, crud.  maillib.crm broke.  Here's the error: :*:_nl:/
    output /:*:broken_program_message:/
    output [stderr] /:*:_nl: ERROR: maillib.crm broke.  Here's the error: :*:_nl:/
    output [stderr] /ERROR: :*:broken_program_message:/
}
exit /:*:program_fault_exit_code:/




